import streamlit as st
import pandas as pd
import plotly.express as px
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread_dataframe import get_as_dataframe

##############################################
# PH·∫¶N 1: LOAD D·ªÆ LI·ªÜU T·ª™ GOOGLE SHEET
##############################################

@st.cache_data(show_spinner=False)
def load_data():
    """
    Load d·ªØ li·ªáu t·ª´ Google Sheet s·ª≠ d·ª•ng th√¥ng tin trong st.secrets.
    Y√™u c·∫ßu c√≥ key [gcp_service_account] v√† [sheet] trong secrets.
    """
    scope = [
        "https://spreadsheets.google.com/feeds", 
        "https://www.googleapis.com/auth/drive"
    ]
    try:
        creds_dict = st.secrets["gcp_service_account"]
    except KeyError:
        st.error(
            "Thi·∫øu key 'gcp_service_account' trong st.secrets. "
            "Vui l√≤ng th√™m n√≥ v√†o file .streamlit/secrets.toml ho·∫∑c trong c√†i ƒë·∫∑t app tr√™n Streamlit Cloud."
        )
        return pd.DataFrame()
    
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(credentials)
    
    try:
        sheet_url = st.secrets["sheet"]["url"]
    except KeyError:
        st.error("Thi·∫øu key 'sheet' trong st.secrets. Vui l√≤ng th√™m n√≥.")
        return pd.DataFrame()
    
    spreadsheet = client.open_by_url(sheet_url)
    worksheet = spreadsheet.get_worksheet(0)
    df = get_as_dataframe(worksheet, evaluate_formulas=True, header=0)
    df = df.dropna(how="all")
    return df

# Load d·ªØ li·ªáu t·ª´ Google Sheet
data = load_data()
if data.empty:
    st.stop()

##############################################
# PH·∫¶N 2: T·∫†O B·ªò L·ªåC TR√äN SIDEBAR
##############################################

st.sidebar.header("B·ªô l·ªçc d·ªØ li·ªáu")

# Th√™m ƒëo·∫°n n√†y v√†o ƒë·∫ßu ph·∫ßn 2, ngay sau st.sidebar.header("B·ªô l·ªçc d·ªØ li·ªáu")
st.sidebar.markdown("---")
st.sidebar.header("C·∫•u h√¨nh ph√¢n t√≠ch")

# Th√™m thanh tr∆∞·ª£t cho ng∆∞·ª°ng gi·ªõi h·∫°n
threshold_value = st.sidebar.slider(
    "Ng∆∞·ª°ng gi·ªõi h·∫°n c·∫£m quan:",
    min_value=4.0,
    max_value=9.0,
    value=6.5,
    step=0.1,
    help="Gi√° tr·ªã c·∫£m quan v∆∞·ª£t qua ng∆∞·ª°ng n√†y ƒë∆∞·ª£c coi l√† kh√¥ng ƒë·∫°t"
)

# Th√™m t√πy ch·ªçn hi·ªÉn th·ªã d·ª± b√°o
show_projection = st.sidebar.checkbox("Hi·ªÉn th·ªã d·ª± b√°o th·ªùi h·∫°n s·ª≠ d·ª•ng", value=True)

# Th√™m t√πy ch·ªçn ch·∫ø ƒë·ªô hi·ªÉn th·ªã
display_mode = st.sidebar.radio(
    "Ch·∫ø ƒë·ªô hi·ªÉn th·ªã:",
    options=["Standard", "Professional", "Compact"],
    index=0
)

##############################################
# S·ª¨A PH·∫¶N 3: X·ª¨ L√ù D·ªÆ LI·ªÜU CHO BI·ªÇU ƒê·ªí
##############################################

# Th√™m ƒëo·∫°n code n√†y sau ph·∫ßn parse_sample_name v√† tr∆∞·ªõc ph·∫ßn l·ªçc d·ªØ li·ªáu

# H√†m d·ª± b√°o th·ªùi ƒëi·ªÉm ƒë·∫°t ng∆∞·ª°ng gi·ªõi h·∫°n
def calculate_projections(df, test_col, time_col, value_col, threshold=6.5):
    """
    D·ª± b√°o th·ªùi ƒëi·ªÉm ƒë·∫°t ng∆∞·ª°ng gi·ªõi h·∫°n cho t·ª´ng ch·ªâ ti√™u
    
    Args:
        df: DataFrame v·ªõi d·ªØ li·ªáu
        test_col: T√™n c·ªôt ch·ª©a t√™n ch·ªâ ti√™u 
        time_col: T√™n c·ªôt ch·ª©a th·ªùi gian (th√°ng)
        value_col: T√™n c·ªôt ch·ª©a gi√° tr·ªã c·∫£m quan
        threshold: Ng∆∞·ª°ng gi·ªõi h·∫°n
        
    Returns:
        dict: D·ª± b√°o cho m·ªói ch·ªâ ti√™u
    """
    projections = {}
    
    # Nh√≥m d·ªØ li·ªáu theo ch·ªâ ti√™u
    for test, group in df.groupby(test_col):
        if len(group) < 2:
            projections[test] = "Kh√¥ng ƒë·ªß d·ªØ li·ªáu"
            continue
            
        # S·∫Øp x·∫øp theo th·ªùi gian v√† l·∫•y 3 ƒëi·ªÉm g·∫ßn nh·∫•t
        group = group.sort_values(time_col)
        recent_points = group.tail(3)
        
        if len(recent_points) < 2:
            projections[test] = "Kh√¥ng ƒë·ªß d·ªØ li·ªáu"
            continue
            
        # T√≠nh t·ªëc ƒë·ªô thay ƒë·ªïi
        x_values = recent_points[time_col].values
        y_values = recent_points[value_col].values
        
        # T√≠nh h·ªá s·ªë g√≥c c·ªßa ƒë∆∞·ªùng th·∫≥ng (t·ªëc ƒë·ªô thay ƒë·ªïi)
        if len(set(x_values)) < 2:
            projections[test] = "Kh√¥ng ƒë·ªß d·ªØ li·ªáu"
            continue
            
        try:
            # S·ª≠ d·ª•ng numpy polyfit ƒë·ªÉ t√¨m ƒë∆∞·ªùng th·∫≥ng t·ªët nh·∫•t
            import numpy as np
            slope, intercept = np.polyfit(x_values, y_values, 1)
            
            # ƒêi·ªÉm cu·ªëi c√πng
            last_x = x_values[-1]
            last_y = y_values[-1]
            
            # N·∫øu ƒë∆∞·ªùng th·∫≥ng ƒëi xu·ªëng ho·∫∑c ngang
            if slope <= 0:
                projections[test] = "Kh√¥ng x√°c ƒë·ªãnh (xu h∆∞·ªõng ƒëi ngang ho·∫∑c gi·∫£m)"
            else:
                # T√≠nh th·ªùi ƒëi·ªÉm ƒë·∫°t ng∆∞·ª°ng (x = (threshold - intercept) / slope)
                projected_month = (threshold - intercept) / slope
                
                # N·∫øu ƒë√£ v∆∞·ª£t ng∆∞·ª°ng
                if last_y >= threshold:
                    projections[test] = "ƒê√£ v∆∞·ª£t ng∆∞·ª°ng"
                else:
                    projections[test] = round(projected_month, 1)
        except:
            projections[test] = "L·ªói khi t√≠nh to√°n"
    
    return projections

##############################################
# S·ª¨A PH·∫¶N 4: V·∫º BI·ªÇU ƒê·ªí V·ªöI PLOTLY
##############################################

# Thay th·∫ø ph·∫ßn v·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng c·∫£m quan (Line Chart) b·∫±ng ƒëo·∫°n code sau:

st.markdown("## Bi·ªÉu ƒë·ªì xu h∆∞·ªõng c·∫£m quan")

# Bi·ªÉu ƒë·ªì xu h∆∞·ªõng c·∫£m quan (Line Chart) v·ªõi ng∆∞·ª°ng gi·ªõi h·∫°n
if not sensory_grouped.empty:
    # T√≠nh d·ª± b√°o n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if show_projection:
        projections = calculate_projections(
            sensory_grouped, 
            "Test description", 
            "Time_Months", 
            "Actual result", 
            threshold_value
        )
        
        # Hi·ªÉn th·ªã b·∫£ng d·ª± b√°o
        projection_data = []
        for test, value in projections.items():
            latest_data = sensory_grouped[sensory_grouped["Test description"] == test].sort_values("Time_Months").iloc[-1]
            projection_data.append({
                "Ch·ªâ ti√™u": test,
                "Gi√° tr·ªã hi·ªán t·∫°i": f"{latest_data['Actual result']:.2f}",
                "D·ª± b√°o th√°ng ƒë·∫°t ng∆∞·ª°ng": value
            })
        
        projection_df = pd.DataFrame(projection_data)
        
        # T√≠nh th·ªùi h·∫°n s·ª≠ d·ª•ng d·ª± ki·∫øn
        shelf_life_values = []
        for val in projections.values():
            try:
                if isinstance(val, (int, float)):
                    shelf_life_values.append(val)
            except:
                pass
        
        min_shelf_life = min(shelf_life_values) if shelf_life_values else "Kh√¥ng x√°c ƒë·ªãnh"
        
        # Hi·ªÉn th·ªã th√¥ng tin th·ªùi h·∫°n s·ª≠ d·ª•ng
        col1, col2 = st.columns(2)
        with col1:
            if isinstance(min_shelf_life, (int, float)):
                st.info(f"üí° D·ª± ki·∫øn th·ªùi h·∫°n s·ª≠ d·ª•ng: **{min_shelf_life:.1f} th√°ng**")
            else:
                st.info(f"üí° D·ª± ki·∫øn th·ªùi h·∫°n s·ª≠ d·ª•ng: **{min_shelf_life}**")
        
        with col2:
            st.info(f"‚ö†Ô∏è Ng∆∞·ª°ng gi·ªõi h·∫°n: **{threshold_value}**")
    
    # T·∫°o bi·ªÉu ƒë·ªì xu h∆∞·ªõng
    fig_sensory = px.line(
        sensory_grouped,
        x="Time_Months",
        y="Actual result",
        color="Test description",
        markers=True,
        template="plotly_white",
        title="Xu h∆∞·ªõng C·∫¢M QUAN theo th·ªùi gian l∆∞u"
    )
    
    # Th√™m ƒë∆∞·ªùng ng∆∞·ª°ng gi·ªõi h·∫°n
    fig_sensory.add_shape(
        type="line",
        x0=sensory_grouped["Time_Months"].min(),
        x1=sensory_grouped["Time_Months"].max() * 1.2,  # K√©o d√†i sang ph·∫£i
        y0=threshold_value,
        y1=threshold_value,
        line=dict(color="red", width=2, dash="dash"),
    )
    
    # Th√™m nh√£n cho ƒë∆∞·ªùng ng∆∞·ª°ng
    fig_sensory.add_annotation(
        x=sensory_grouped["Time_Months"].max() * 1.1,
        y=threshold_value,
        text=f"Ng∆∞·ª°ng gi·ªõi h·∫°n: {threshold_value}",
        showarrow=False,
        font=dict(color="red", size=12),
    )
    
    # Th√™m d·ª± b√°o v√†o bi·ªÉu ƒë·ªì n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if show_projection:
        # Cho m·ªói ch·ªâ ti√™u, th√™m ƒë∆∞·ªùng d·ª± b√°o
        for test, proj_month in projections.items():
            if isinstance(proj_month, (int, float)):
                # L·∫•y ƒëi·ªÉm cu·ªëi c√πng c·ªßa ch·ªâ ti√™u
                test_data = sensory_grouped[sensory_grouped["Test description"] == test].sort_values("Time_Months")
                if len(test_data) > 0:
                    last_point = test_data.iloc[-1]
                    last_month = last_point["Time_Months"]
                    last_value = last_point["Actual result"]
                    
                    # Th√™m ƒë∆∞·ªùng d·ª± b√°o
                    fig_sensory.add_shape(
                        type="line",
                        x0=last_month,
                        x1=proj_month,
                        y0=last_value,
                        y1=threshold_value,
                        line=dict(
                            color=px.colors.qualitative.Plotly[list(sensory_grouped["Test description"].unique()).index(test) % len(px.colors.qualitative.Plotly)], 
                            width=1, 
                            dash="dot"
                        ),
                    )
                    
                    # Th√™m ƒëi·ªÉm d·ª± b√°o
                    fig_sensory.add_trace(
                        go.Scatter(
                            x=[proj_month],
                            y=[threshold_value],
                            mode="markers",
                            marker=dict(
                                symbol="star",
                                size=10,
                                color=px.colors.qualitative.Plotly[list(sensory_grouped["Test description"].unique()).index(test) % len(px.colors.qualitative.Plotly)],
                            ),
                            name=f"{test} (d·ª± b√°o th√°ng {proj_month})",
                            showlegend=True
                        )
                    )
    
    # C·∫•u h√¨nh layout d·ª±a tr√™n ch·∫ø ƒë·ªô hi·ªÉn th·ªã
    if display_mode == "Professional":
        fig_sensory.update_layout(
            xaxis_title="Th·ªùi gian (th√°ng)",
            yaxis_title="Gi√° tr·ªã c·∫£m quan",
            legend_title="Ch·ªâ ti√™u c·∫£m quan",
            hovermode="x unified",
            font=dict(family="Arial", size=12),
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
            margin=dict(l=40, r=40, t=80, b=40),
            plot_bgcolor="white",
            title=dict(font=dict(size=20, color="#333333"), x=0.5, xanchor="center")
        )
    elif display_mode == "Compact":
        fig_sensory.update_layout(
            xaxis_title="Th√°ng",
            yaxis_title="Gi√° tr·ªã",
            showlegend=False,
            hovermode="closest",
            margin=dict(l=20, r=20, t=40, b=20),
            height=300
        )
    else:  # Standard
        fig_sensory.update_layout(
            xaxis_title="Th·ªùi gian (th√°ng)",
            yaxis_title="K·∫øt qu·∫£ Actual",
            legend_title="Ch·ªâ ti√™u",
            hovermode="x unified"
        )
    
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig_sensory, use_container_width=True)
    
    # Hi·ªÉn th·ªã b·∫£ng d·ª± b√°o n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if show_projection:
        st.markdown("### D·ª± b√°o th·ªùi ƒëi·ªÉm ƒë·∫°t ng∆∞·ª°ng gi·ªõi h·∫°n")
        st.dataframe(projection_df, use_container_width=True, hide_index=True)
        
        # Hi·ªÉn th·ªã nh·∫≠n x√©t ph√¢n t√≠ch
        st.markdown("### Nh·∫≠n x√©t ph√¢n t√≠ch")
        
        # T√¨m ch·ªâ ti√™u quy·∫øt ƒë·ªãnh ƒë·∫øn h·∫°n s·ª≠ d·ª•ng
        critical_attr = None
        critical_month = None
        
        for test, value in projections.items():
            if isinstance(value, (int, float)):
                if critical_month is None or value < critical_month:
                    critical_month = value
                    critical_attr = test
        
        if critical_attr:
            st.info(f"""
            üí° **ƒê√°nh gi√° chung:**
            
            - Ch·ªâ ti√™u quy·∫øt ƒë·ªãnh ƒë·∫øn h·∫°n s·ª≠ d·ª•ng: **{critical_attr}** (d·ª± ki·∫øn ƒë·∫°t ng∆∞·ª°ng v√†o th√°ng {critical_month:.1f})
            - C√°c ch·ªâ ti√™u c√≤n l·∫°i c√≥ th·ªùi h·∫°n d√†i h∆°n, cho th·∫•y **{critical_attr}** l√† ch·ªâ ti√™u h·∫°n ch·∫ø ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m
            - Khuy·∫øn ngh·ªã: T·∫≠p trung c·∫£i thi·ªán ƒë·ªô ·ªïn ƒë·ªãnh c·ªßa ch·ªâ ti√™u **{critical_attr}**
            """)
else:
    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu c·∫£m quan ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.")

# Ti·∫øp t·ª•c v·ªõi bi·ªÉu ƒë·ªì xu h∆∞·ªõng h√≥a l√Ω (Line Chart) v√† th√™m t∆∞∆°ng t·ª±
# ...

##############################################
# S·ª¨A PH·∫¶N 5: TH√äM PH√ÇN T√çCH M·ªöI
##############################################

# Th√™m v√†o cu·ªëi file, sau t·∫•t c·∫£ bi·ªÉu ƒë·ªì hi·ªán t·∫°i

# Ki·ªÉm tra n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu c·∫£m quan
if not sensory_grouped.empty and show_projection:
    st.markdown("## Ph√¢n t√≠ch t·ªëc ƒë·ªô bi·∫øn ƒë·ªïi")
    
    # T√≠nh t·ªëc ƒë·ªô thay ƒë·ªïi cho m·ªói ch·ªâ ti√™u
    change_rates = []
    
    for test, group in sensory_grouped.groupby("Test description"):
        if len(group) >= 3:
            # S·∫Øp x·∫øp theo th·ªùi gian
            group = group.sort_values("Time_Months")
            
            # L·∫•y 3 ƒëi·ªÉm g·∫ßn nh·∫•t
            recent = group.tail(3)
            
            # T√≠nh t·ªëc ƒë·ªô thay ƒë·ªïi
            first_month = recent["Time_Months"].iloc[0]
            last_month = recent["Time_Months"].iloc[-1]
            first_value = recent["Actual result"].iloc[0]
            last_value = recent["Actual result"].iloc[-1]
            
            if last_month > first_month:
                rate = (last_value - first_value) / (last_month - first_month)
                
                change_rates.append({
                    "Ch·ªâ ti√™u": test,
                    "T·ªëc ƒë·ªô thay ƒë·ªïi": rate
                })
    
    if change_rates:
        # T·∫°o DataFrame
        change_df = pd.DataFrame(change_rates)
        
        # S·∫Øp x·∫øp theo t·ªëc ƒë·ªô thay ƒë·ªïi (gi·∫£m d·∫ßn)
        change_df = change_df.sort_values("T·ªëc ƒë·ªô thay ƒë·ªïi", ascending=False)
        
        # V·∫Ω bi·ªÉu ƒë·ªì thanh ngang
        fig_change = px.bar(
            change_df,
            y="Ch·ªâ ti√™u",
            x="T·ªëc ƒë·ªô thay ƒë·ªïi",
            orientation="h",
            title="T·ªëc ƒë·ªô thay ƒë·ªïi c·ªßa c√°c ch·ªâ ti√™u (ƒë∆°n v·ªã/th√°ng)",
            template="plotly_white",
            text_auto='.2f'
        )
        
        fig_change.update_layout(
            xaxis_title="T·ªëc ƒë·ªô thay ƒë·ªïi (ƒë∆°n v·ªã/th√°ng)",
            yaxis_title="",
            height=400
        )
        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(fig_change, use_container_width=True)
        
        # Hi·ªÉn th·ªã nh·∫≠n x√©t v·ªÅ t·ªëc ƒë·ªô thay ƒë·ªïi
        fastest = change_df.iloc[0]
        slowest = change_df.iloc[-1]
        
        st.info(f"""
        üí° **Ph√¢n t√≠ch t·ªëc ƒë·ªô bi·∫øn ƒë·ªïi:**
        
        - Ch·ªâ ti√™u **{fastest["Ch·ªâ ti√™u"]}** c√≥ t·ªëc ƒë·ªô thay ƒë·ªïi nhanh nh·∫•t: {fastest["T·ªëc ƒë·ªô thay ƒë·ªïi"]:.2f} ƒë∆°n v·ªã/th√°ng
        - Ch·ªâ ti√™u **{slowest["Ch·ªâ ti√™u"]}** c√≥ t·ªëc ƒë·ªô thay ƒë·ªïi ch·∫≠m nh·∫•t: {slowest["T·ªëc ƒë·ªô thay ƒë·ªïi"]:.2f} ƒë∆°n v·ªã/th√°ng
        - T·∫•t c·∫£ c√°c ch·ªâ ti√™u ƒë·ªÅu c√≥ xu h∆∞·ªõng thay ƒë·ªïi theo th·ªùi gian, v·ªõi t·ªëc ƒë·ªô kh√°c nhau
        """)
